git config --global user.name "Violetta Tsyrkot"

git config --global user.email violetta.ua@gmail.com

git config --global core.editor notepad.exe

git config --list



$ cd c:

viole@DESKTOP-UOAE4DF MINGW64 /c
$ cd Різне

viole@DESKTOP-UOAE4DF MINGW64 /c/Різне
$ cd SQL

viole@DESKTOP-UOAE4DF MINGW64 /c/Різне/SQL
$ cd Applestore

git init

git status

git add  назва файла , наприклад git add AppleStoreTables.txt

git commit    і записуємо, що саме у файлі ми змінили

git add .      це якщо ви змінили файл, який недавно закомітили то щоб знову не набирати його повну назву (AppleStoreTables.txt), просто тре поставити крапку

git commit -m  для того щоб після команди git commit постійно не появлялось вікно для пояснення змін можна після команди git commit -m написати в лапках 
пояснення (наприклад git commit -m "add line aaaaa" )

git commit -a -m     якщо ми вже даний файл хоч раз індексували (тобто хоч раз проробляли з ним команду git add ) то при тому, як ми в нього вносимо зміни 
нам немає потреби робити   знов git add, ми робимо команду git commit -a -m, яка означає, що ми -a(add) -m(message), тобто додаємо і коментуємо зміни
 в нашому файлі. Приклад  git commit -a -m "add new line aaaa"

git log   дає нам список комітів (тих зафіксованих файлів, які ми комітили)

git checkout 9c9def0534b83bd0c54   ми переміщаємося на один з тих комітів (знимків файлу, який ми міняли), який ми вибрали і імя якого (9c9def0534b83bd0c54)
ми вказуємо після команди git checkout

git checkout master  означає, що ми знову повернулись до своєї останньої версії файлу до головної гілки

git branch  це команда, яка показує на якій гілці ми зараз находимось

git branch b1   якщо ми хочемо створити нову гілку то ми пишемо git branch  і назву гілочки b1

$  git checkout b1  це команда, щоб переключитися між гілочками, в даний момент ми переключаємось з гілки master на гілку b1  і ми отримуємо такий результат:
$ git branch
* b1
  master  бачимо що є дві гілки і біля гілки b1 є (*), що означає, що зараз ми знаходимось на гілці b1

git merge b1  для того щоб нам влити дані з гілки b1 до гілки master  то спочтку треба вибрати гілку master  набравши команду git checkout master, а потім 
набрати команду git merge b1

git merge master є правило доброго тону, перед тим як влити дані з гілки  b1, потрібно спочатку влити дані з гілки master щоб не було конфлікту, перевірити файл
внести коректні зміни і після того злиати гілку  b1 з гілкою master

git branch -d b1 після того як я злила всі дані з гілки b1 я можу її видалити за допомогою команди git branch -d і додати імя гілки b1

git remote add origin  команда, що зв'язує локальний репозиторій з віддаленим репозиторієм (тим що онлайн в інтернеті на Github)

git remote  команда, яка показує які є в нас наявні (онлайн на Github) репозиторії, а команда 

git remote -v  дозволяє вивести які є наявні посилання на (онлайн в Github) репозиторії

git pull origin main  команда, щ що заливає дані з віддаленого репозиторія (того що онлайн в інтернеті на Github) до локального репозиторія (що на компі)

git push origin main команда, щ що заливає дані з локального репозиторія (що на компі) до віддаленого репозиторія (того що онлайн в інтернеті на Github)

git clone

git push origin Violetta коли в локальному репозиторії появляється нова гілка і її треба закинути в віддалений репозиторій то потрібно написати команду  
git push origin і додати до неї ім'я нової гілки (в даному випадку Violetta)

:q!  ця команда дозволяє виходити, якщо не підмінений win на notepad.exe


added all created tables of AppleStore database








